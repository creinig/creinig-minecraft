--
-- Little API to make moving and digging with the turtle a bit easier
--
-- Requires: os.loadAPI("apis/util")
--

--
-- State ----------------------
--

-- (const) The position of origin
local homePosition = {
	x = 0, y = 0, z = 0,
	xdir = 0, zdir = 1
	}
	
-- The current position relative to the starting position
local pos = util.cloneTable(homePosition)

-- should a movement always dig through any obstacles?
local alwaysDig = false

-- print debug messages?
local doDebug = false

-- seconds to wait between dig attempts
local sleepTime = 0.2

-- "Blocks collected" counter
local collected = 0



--
-- Internals -------------------------------
--

local function collect()
	collected = collected + 1
	if(math.fmod(collected, 25) == 0) then
		print("Mined ", collected, " blocks.")
	end
end


-- dig one block forward, possible multiple times if something
-- has fallen down
local function tryDigForward()
	while turtle.dig() do
		collect()
		sleep(sleepTime)
		if not turtle.detect() then
			return true
		end
	end
	
	return not turtle.detect()
end

-- dig one block upward, possible multiple times if something
-- has fallen down
local function tryDigUp()
	while turtle.digUp() do
		collect()
		sleep(sleepTime)
		if not turtle.detectUp() then
			return true
		end
	end
	
	return not turtle.detectUp()
end

-- dig one block down, possible multiple times if something
-- has, uh, moved into the spot
local function tryDigDown()
	while turtle.digDown() do
		collect()
		sleep(sleepTime)
		if not turtle.detectDown() then
			return true
		end
	end
	
	return not turtle.detectDown()
end



-- Move one block forward. Optionally removes anything in the way
local function forward1()
	if(alwaysDig) then
		while not turtle.forward() do
			tryDigForward()
		end
	else
		turtle.forward()
	end
	
	pos.x = pos.x + pos.xdir
	pos.z = pos.z + pos.zdir
	--sleep(sleepTime) -- uncomment for debugging
end


-- Move one block upward
local function up1() 
	if(alwaysDig) then
		while not turtle.up() do
			tryDigUp()
		end
	else
		turtle.up()
	end
	
	pos.y = pos.y + 1
end

-- Move one block down
local function down1()
	if(alwaysDig) then
		while not turtle.down() do
			tryDigDown()
		end
	else
		turtle.down()
	end
	
	pos.y = pos.y - 1
end



--
-- API -------------------------
--

-- Set a flag that all movement operations should also 
-- remove dig away in the way
function enableDigging()
	alwaysDig = true
end

function disableDigging()
	alwaysDig = false
end


function setDebugging(enable)
	doDebug = enable
end

-- Move <distance> blocks forward
function forward(distance)
	for i=1, distance do
		forward1()
		if(doDebug) then debug() end
	end
end

-- Move <distance> blocks up
function up(distance)
	for i=1, distance do
		up1()
		if(doDebug) then debug() end
	end
end

-- Move <distance> blocks down
function down(distance)
	for i=1, distance do
		down1()
		if(doDebug) then debug() end
	end
end

function turnLeft()
	turtle.turnLeft()
	pos.xdir, pos.zdir = -pos.zdir, pos.xdir
end

function turnRight()
	turtle.turnRight()
	pos.xdir, pos.zdir = pos.zdir, -pos.xdir
end

-- Turn the turtle by 180 degrees
function turnAround()
	turnLeft()
	turnLeft()
end

-- Turn the turtle to the given facing relative to the original
-- (0,1) = original facing, (1,0) = right, (-1,0) = left, (0,-1) = back
function turnTo(xDirection, zDirection)
	local turns = 0
	while((pos.xdir ~= xDirection) or (pos.zdir ~= zDirection)) do
		turnLeft()
		turns = turns + 1
		if(doDebug) then debug() end
		
		if(turns > 4) then
			print("(", xDirection, ",", zDirection, ") isn't valid, you idiot!")
			return
		end
	end
end

-- Move to the point of origin
function returnHome(order)
	to(homePosition, order)
end

-- Move to the given position
--
-- "order" defines the order of the axis movement. 
-- "zyx" would mean "first move to z=0, then y=0, then x=0"
function to(destPosition, order)
	order = order or "xyz"
	local dest = destPosition
	local xdiff = pos.x - dest.x
	local ydiff = pos.y - dest.y
	local zdiff = pos.z - dest.z
	
	for i=1, 3 do
		local dir = string.sub(order, i, i)

		if(dir == "x") then
			if(xdiff > 0) then
				turnTo(-1, 0)
				forward(xdiff)
			else
				turnTo(1, 0)
				forward(-xdiff)
			end
		elseif(dir == "y") then
			if(ydiff > 0) then
				down(ydiff)
			else
				up(-ydiff)
			end
		elseif(dir == "z") then
			if(zdiff > 0) then
				turnTo(0, -1)
				forward(zdiff)
			else
				turnTo(0, 1)
				forward(-zdiff)
			end
		else
			print("Unknown axis '", dir, "'!")
		end
	end
	
		
	turnTo(dest.xdir, dest.zdir)
end


-- Get the current position
function getPosition()
	return util.cloneTable(position)
end

-- Define the current position as new point of origin
function reset()
	pos = util.cloneTable(homePosition)
end

function debug()
	print("x=", pos.x, " / y=" , pos.y, " / z=", pos.z, 
	      " / dir=", pos.xdir, ",", pos.zdir) 
end
