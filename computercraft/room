local tArgs = { ... }
-- check number of arguments
if #tArgs < 3 or #tArgs > 4 then
    error("Usage: room <depth> <height> <width>")
end

depth = tonumber(tArgs[1])
height = tonumber(tArgs[2])
width = tonumber(tArgs[3])

local sleepTime = 0.2
local collected = 0
local firstDig = true -- depth on first row is one more than for the others

local function collect()
	collected = collected + 1
	if(math.fmod(collected, 25) == 0) then
		print("Mined ", collected, " blocks.")
	end
end

-- dig one block forward, possible multiple times if something
-- has fallen down
local function tryDig()
	while turtle.dig() do
		collect()
		sleep(sleepTime)
		if not turtle.detect() then
			return true
		end
	end
	
	return not turtle.detect()
end

-- dig one block upward, possible multiple times if something
-- has fallen down
local function tryDigUp()
	while turtle.digUp() do
		collect()
		sleep(sleepTime)
		if not turtle.detectUp() then
			return true
		end
	end
	
	return not turtle.detectUp()
end

-- dig and move one block forward. Retries as long as something is in the way
local function digForward() 
	while not turtle.forward() do
		tryDig()
	end
	--sleep(sleepTime) -- uncomment for debugging
end

-- dig and move one block upward. Retries as long as something is in the way
local function digUp() 
	while not turtle.up() do
		tryDigUp()
	end
end


-- create room
for widthTemp = 1, width do
   for heightTemp = 1, height do
		local depthToDig = depth - 1
		if firstDig then
			depthToDig = depth
			firstDig = false
		end
		
    	for depthTemp = 1, depthToDig do
            print ("d ", depthTemp, "/", depth, " h ", heightTemp, "/", height)
          	-- dig straight forward
          	digForward()
        end
          -- line complete, move to next line
        if heightTemp<height then
          	digUp()
            turtle.turnLeft()
            turtle.turnLeft()
        end
   end
   
   -- slice complete, return to start
   -- move back on odd heights, otherwise we are already back
   if height % 2 == 1 then
          turtle.turnLeft()
          turtle.turnLeft()
          for depthTemp=1, depth-1 do
            digForward()
          end
   end
   -- move down
   for heightTemp=1, height-1 do
          turtle.down()
   end
   -- next slice
   if widthTemp < width then
          turtle.turnLeft()
          digForward()
          turtle.turnLeft()
   end
end

